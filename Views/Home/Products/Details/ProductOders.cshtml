<nav class="order-b">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex items-center justify-between h-8">
                <div class="flex items-center">
                    <span class="text-gray-500">
                        <a href="/" class="hover:text-red-500"><i class="fas fa-home mr-2"></i>Trang ch·ªß</a> / PCBEST / 
                         <span id="breadcrumb-product-name">(t√™n s·∫£n ph·∫©m)</span>
                    </span>
                </div>
            </div>
        </div>
    </nav>
<div class="lg:grid lg:grid-cols-2 lg:gap-x-8 lg:items-start">
    <!-- Image gallery: kh·ªüi t·∫°o Alpine component v·ªõi x-data v√† g·ªçi fetchProduct ngay khi kh·ªüi t·∫°o -->
    <div class="flex flex-col" x-data="imageGallery()" x-init="fetchProduct()">
        <!-- Main Image -->
        <div
            class="relative bg-white border border-gray-300 rounded-lg flex justify-center anh max-w-[592px] min-w-[592px] max-h-[400px] min-h-[400px] mx-auto overflow-hidden">
            <a :href="images[currentIndex]" data-fancybox="gallery">
                <img :src="images[currentIndex]" alt="Product image" class="w-full h-full object-contain rounded-lg"
                    onerror="this.style.display='none'; this.parentElement.classList.add('bg-gray-200', 'border-dashed', 'border-2', 'border-gray-400'); this.parentElement.innerHTML='No Image Available';">
            </a>
            <button x-on:click="prev"
                class="absolute left-2 top-1/2 -translate-y-1/2 bg-white rounded-full p-2 shadow-lg">
                <i class="fas fa-chevron-left"></i>
            </button>
            <button x-on:click="next"
                class="absolute right-2 top-1/2 -translate-y-1/2 bg-white rounded-full p-2 shadow-lg">
                <i class="fas fa-chevron-right"></i>
            </button>
        </div>

        <!-- Slider for thumbnails -->
        <div class="mt-4 overflow-hidden relative">
            <div class="flex transition-transform duration-300" :style="{ transform: `translateX(-${scrollIndex}px)` }">
                <template x-for="(image, index) in images" :key="index">
                    <a :href="image" data-fancybox="gallery" :class="{'ring-2 ring-red-500': currentIndex === index}"
                        class="flex-shrink-0 rounded-lg overflow-hidden"
                        :style="{ width: `${itemWidth}px`, height: `${itemWidth}px`, marginRight: `${gap}px` }"
                        x-on:click.prevent="currentIndex = index; adjustScroll()">
                        <img :src="image" :alt="`Thumbnail ${index + 1}`" class="w-full h-full object-cover">
                    </a>
                </template>
            </div>
            <!-- Navigation buttons -->
            <button x-on:click="scrollLeft"
                class="absolute left-2 top-1/2 -translate-y-1/2 bg-white p-2 rounded-full shadow-lg">
                <i class="fas fa-chevron-left"></i>
            </button>
            <button x-on:click="scrollRight"
                class="absolute right-4 top-1/2 -translate-y-1/2 bg-white p-2 rounded-full shadow-lg">
                <i class="fas fa-chevron-right"></i>
            </button>
        </div>
    </div>

    <!-- Product info -->
    <div class="mt-10 px-4 sm:px-0 sm:mt-16 lg:mt-0">
        <h1 id="product-name" class="text-3xl font-bold tracking-tight text-gray-900">
            (t√™n s·∫£n ph·∫©m)
        </h1>
        <div class="flex items-center gap-4">
            <h2 class="sr-only">Product information</h2>
            <p class="text-3xl font-semibold text-red-600"><span id="price-after-discount">gi√° ƒë√£ gi·∫£m</span></p>
            <p class="text-2xl text-gray-500 line-through"><span id="price-before-discount">gi√° tr∆∞·ªõc khi gi·∫£m</span></p>
        <p class="px-2 py-1 text-sm font-semibold text-red-600 border border-red-600 rounded"><span id="discount-percentage">-%</span></p>
        </div>

        <!-- Promotion -->
        <div class="mt-6 bg-red-50 border-red-200 rounded-lg p-4">
            <div class="flex items-center gap-2 text-red-600 font-medium">
                <i class="fas fa-gift"></i>
                Qu√† t·∫∑ng
            </div>
            <div class="mt-2 space-y-2">
                <p>T·∫∑ng k√®m RAM V-Color Prism RGB White tr·ªã gi√° 890.000ƒë</p>
            </div>
        </div>

        <!-- Promotions -->
        <div class="mt-6 bg-white rounded-lg p-4 border">
            <h3 class="font-medium">∆Øu ƒë√£i</h3>
            <ul class="mt-2 space-y-2">
                <li class="flex items-center gap-2">
                    <i class="fas fa-info-circle text-green-500"></i>
                    <span>Gi·∫£m ngay 200.000ƒë khi n√¢ng c·∫•p SSD</span>
                    <button class="text-blue-600 text-sm">Xem th√™m</button>
                </li>
                <li class="flex items-center gap-2">
                    <i class="fas fa-info-circle text-green-500"></i>
                    <span>Gi·∫£m ngay 300.000ƒë khi mua th√™m RAM</span>
                    <button class="text-blue-600 text-sm">Xem th√™m</button>
                </li>
                <li class="flex items-center gap-2">
                    <i class="fas fa-info-circle text-green-500"></i>
                    <span>Gi·∫£m ngay 300.000ƒë khi mua Microsoft Office k√®m PC</span>
                    <button class="text-blue-600 text-sm">Xem th√™m</button>
                </li>
            </ul>
        </div>

        <div class="mt-6">
            <button
                class="Addtocart w-full h-12 text-lg bg-red-600 hover:bg-red-700 text-white rounded-lg flex items-center justify-center">
                <i class="fas fa-shopping-cart mr-2"></i>
                ƒê·∫∑t h√†ng
            </button>
        </div>
    </div>
</div>

<script>
    function imageGallery() {
  return {
    images: [],
    currentIndex: 0,
    scrollIndex: 0,
    itemWidth: 80, // Chi·ªÅu r·ªông m·ªói ·∫£nh trong slider
    gap: 21,       // Kho·∫£ng c√°ch gi·ªØa c√°c ·∫£nh
    visibleItems: 6, // S·ªë ·∫£nh hi·ªÉn th·ªã trong slider

    async fetchProduct() {
      const urlParams = new URLSearchParams(window.location.search);
      const productID = urlParams.get("productID");
      console.log("Danh s√°ch ·∫£nh sau x·ª≠ l√Ω:", this.images);

      if (!productID) {
        console.error("‚ö† Kh√¥ng t√¨m th·∫•y productID tr√™n URL.");
        return;
      }

      try {
        const response = await fetch(`/api/Product/${productID}`);
        console.log("üîÑ K·∫øt qu·∫£ response:", response);

        if (!response.ok) {
          throw new Error(`‚ùå API l·ªói: ${response.status} - ${response.statusText}`);
        }

        const productDTO = await response.json();
        console.log("üì¶ D·ªØ li·ªáu JSON nh·∫≠n ƒë∆∞·ª£c:", productDTO);

        if (!productDTO || !productDTO.product) {
          throw new Error("‚ö† API kh√¥ng tr·∫£ v·ªÅ d·ªØ li·ªáu s·∫£n ph·∫©m h·ª£p l·ªá.");
        }

        const { product, imageThumbnail, imageData } = productDTO;
        // Hi·ªÉn th·ªã t√™n s·∫£n ph·∫©m trong breadcrumb
        document.getElementById("breadcrumb-product-name").textContent = product.productName || "Kh√¥ng c√≥ t√™n";

        // Hi·ªÉn th·ªã t√™n s·∫£n ph·∫©m
        document.getElementById("product-name").textContent = product.productName || "Kh√¥ng c√≥ t√™n";

        // Hi·ªÉn th·ªã gi√° sau gi·∫£m
        document.getElementById("price-after-discount").textContent =
          product.priceAfterDiscount !== undefined
            ? product.priceAfterDiscount.toLocaleString() + "ƒë"
            : "Ch∆∞a c√≥ gi√° sau gi·∫£m";

        // Hi·ªÉn th·ªã gi√° tr∆∞·ªõc khi gi·∫£m
        document.getElementById("price-before-discount").textContent =
        product.priceOriginal !== undefined
            ? product.priceOriginal.toLocaleString() + "ƒë"
            : "Ch∆∞a c√≥ gi√° tr∆∞·ªõc gi·∫£m";
        
        // Hi·ªÉn th·ªã ph·∫ßn trƒÉm gi·∫£m gi√°
        document.getElementById("discount-percentage").textContent =
        product.discountPercentage !== undefined
            ? "-" + product.discountPercentage + "%"
            : "Kh√¥ng c√≥ gi·∫£m gi√°";

        // Kh·ªüi t·∫°o danh s√°ch ·∫£nh
        this.images = [];

        // N·∫øu c√≥ ·∫£nh thumbnail, ƒë·∫∑t n√≥ l√†m ·∫£nh ƒë·∫ßu ti√™n
        if (imageThumbnail && imageThumbnail.trim() !== "") {
          this.images.push(imageThumbnail);
        }

        // Th√™m c√°c ·∫£nh c√≤n l·∫°i t·ª´ imageData
        if (imageData && Array.isArray(imageData) && imageData.length > 0) {
          this.images.push(...imageData.filter(img => img && img.trim() !== ""));
        }

        // N·∫øu kh√¥ng c√≥ ·∫£nh n√†o, d√πng ·∫£nh m·∫∑c ƒë·ªãnh
        if (this.images.length === 0) {
          this.images = ["default-thumbnail.png"];
        }

        // Reset ch·ªâ s·ªë hi·ªÉn th·ªã ·∫£nh ch√≠nh v·ªÅ 0
        this.currentIndex = 0;
        this.scrollIndex = 0;

        console.log("üì∏ Danh s√°ch ·∫£nh sau x·ª≠ l√Ω:", this.images);
      } catch (error) {
        console.error("üö® L·ªói khi t·∫£i s·∫£n ph·∫©m:", error.message);
        alert("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu s·∫£n ph·∫©m. Vui l√≤ng th·ª≠ l·∫°i sau!");
      }
      
        setTimeout(() => {
            let fancyboxItems = document.querySelectorAll("[data-fancybox='gallery']");
            let uniqueImages = new Set();

            fancyboxItems.forEach((item) => {
                if (!uniqueImages.has(item.href)) {
                    uniqueImages.add(item.href);
                } else {
                    item.setAttribute("data-fancybox", ""); // G·ª° b·ªè kh·ªèi nh√≥m Fancybox nh∆∞ng v·∫´n gi·ªØ trong thumbnail
                }
            });

            Fancybox.unbind("[data-fancybox='gallery']");
            Fancybox.bind("[data-fancybox='gallery']");
        }, 500);
    },

    next() {
      if (this.currentIndex < this.images.length - 1) {
        this.currentIndex++;
        this.adjustScroll();
      }
    },
    prev() {
      if (this.currentIndex > 0) {
        this.currentIndex--;
        this.adjustScroll();
      }
    },
    scrollLeft() {
      const totalItemWidth = this.itemWidth + this.gap;
      if (this.scrollIndex > 0) {
        this.scrollIndex = Math.max(0, this.scrollIndex - totalItemWidth);
      }
    },
    scrollRight() {
      const totalItemWidth = this.itemWidth + this.gap;
      const maxScroll = (this.images.length - this.visibleItems) * totalItemWidth;
      if (this.scrollIndex < maxScroll) {
        this.scrollIndex = Math.min(maxScroll, this.scrollIndex + totalItemWidth);
      }
    },
    adjustScroll() {
      const totalItemWidth = this.itemWidth + this.gap;
      const scrollPosition = this.currentIndex * totalItemWidth;
      const visibleWidth = this.visibleItems * totalItemWidth;

      if (scrollPosition < this.scrollIndex) {
        this.scrollIndex = Math.max(0, scrollPosition);
      } else if (scrollPosition + totalItemWidth > this.scrollIndex + visibleWidth) {
        this.scrollIndex = Math.min(
          (this.images.length - this.visibleItems) * totalItemWidth,
          scrollPosition - visibleWidth + totalItemWidth
        );
      }
    }
  };
}
</script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
   // Hi·ªÉn th·ªã th√¥ng b√°o b·∫±ng SweetAlert2
function showAlert(message, type = "success") {
    Swal.fire({
        icon: type,
        title: type === "success" ? "Th√†nh c√¥ng" : "L·ªói",
        text: message,
        confirmButtonText: "OK"
    });
}
    document.addEventListener("DOMContentLoaded", function () {
        document.querySelector(".Addtocart").addEventListener("click", function () {
            const productID = new URLSearchParams(window.location.search).get("productID");
            const productName = document.getElementById("product-name").textContent;
            const priceAfterDiscount = document.getElementById("price-after-discount").textContent;
            const priceBeforeDiscount = document.getElementById("price-before-discount").textContent;
            const imageThumbnail = document.querySelector(".anh img").src;

            let cart = JSON.parse(localStorage.getItem("shoppingCart")) || [];

            // Ki·ªÉm tra s·∫£n ph·∫©m ƒë√£ t·ªìn t·∫°i trong gi·ªè h√†ng ch∆∞a
            let existingProduct = cart.find(item => item.productID == productID);

            if (existingProduct) {
                existingProduct.quantity += 1;
            } else {
                cart.push({
                    productID: productID,
                    productName: productName,
                    priceAfterDiscount: priceAfterDiscount,
                    priceBeforeDiscount: priceBeforeDiscount,
                    imageThumbnail: imageThumbnail,
                    quantity: 1
                });
            }

            localStorage.setItem("shoppingCart", JSON.stringify(cart));

            // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng gi·ªè h√†ng tr√™n header
            updateCartCount();
            // Hi·ªÉn th·ªã th√¥ng b√°o alert
            showAlert(`${productName} ƒë√£ ƒë∆∞·ª£c th√™m v√†o gi·ªè h√†ng!`);
        });
    });

    function updateCartCount() {
        let cart = JSON.parse(localStorage.getItem("shoppingCart")) || [];
        let totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);
        document.querySelector(".cart-notice").textContent = totalItems;
    }
</script>
